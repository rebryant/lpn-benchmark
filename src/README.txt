This directory contains a CNF generator and a solution checker for
the Minimal Disagreement Parity (MDP) benchmark.

Files:
	mdp-gen.py: Benchmark generator.  Generates CNF files
	mdp-check.py: Checker.   Makes sure SAT solver solution(s) satisfy the problem
	writer.py: Utility program used by mdp-gen.py
	generate.sh: A BASH script that generates the benchmark files

The code is written in Python, with the default Python interpreter
being located at /usr/bin/python3.  It can also be invoked by
explicitly listing the python interpreter on the command line.

USING THE GENERATOR

The generator has lots of options, but the important flags are -n, -t, and -s

./mdp-gen.py -h

Usage: mdp-gen.py [-h] [-v] [-x] [-f] [-a] [-O] [-p] [-n N] [-m M] [-k K] [-t T] [-s SEED][-X XARGS]
  -h       Print this message
  -v       Put comments in file
  -x       Exclude expected solution (should make formula unsatisfiable
  -f       Use fixed solution and corruption bits
  -a       Anonymize.  Don't include solution information in file
  -O       Optimize.  Use Plaisted-Greenbaum encoding
  -n N     Number of variables
  -m M     Number of samples (default = 2*N)
  -k K     Number of corrupted samples (default = M/8)
  -t T     Number of mismatches tolerated (default = K)
  -s SEED  Set random seed
  -p       Generate permutation file for BDD variable ordering
  -X XARGS  Set maximum Xor size (must be >= 3)

The generated file will have a name of the form mdp-nN-kK-tT-sS.cnf,
where N is the number of variables, K is the number of corrupted
samples, and T is the number of mismatches tolerated.

For a given value of N, the benchmark files were generated using K=N/4
and T=N/4 for the SAT formula and T=N/4-1 for the UNSAT formula, and
for different seeds S.

USING THE CHECKER

Suppose you've run file mdp-nN-kK-tT-sS.cnf through a SAT solver and stored its output as the file
sat.data.  Then running:

./mdp-check.py mdp-nN-kK-tT-sS.cnf sat.data

will have the program determine the generated parameters from comments
in the .cnf file and check the solution bits generated by the SAT
solver to see if they match at least M-K of the provided samples.



