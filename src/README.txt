This directory contains a CNF generator and a solution checker for
the Learning Parity with Noise (LPN) benchmark.

Files:
	lpn-gen.py: Benchmark generator.  Generates CNF files
	lpn-check.py: Checker.   Makes sure SAT solver solution(s) satisfy the problem
	writer.py: Utility program used by lpn-gen.py

The code is written in python, but the identity of the python
interpreter must be supplied on the command line.  The examples below
all invoke python3.

USING THE GENERATOR

The generator has lots of options, but the important flags are -n, -t, and -s

python3 lpn-gen.py -h

Usage: lpn-gen.py [-h] [-v] [-x] [-f] [-a] [-O] [-p] [-n N] [-m M] [-k K] [-t T] [-s SEED][-X XARGS]
  -h       Print this message
  -v       Put comments in file
  -x       Exclude expected solution (should make formula unsatisfiable
  -f       Use fixed solution and corruption bits
  -a       Anonymize.  Don't include solution information in file
  -O       Optimize.  Use Plaisted-Greenbaum encoding
  -n N     Number of variables
  -m M     Number of samples (default = 2*N)
  -k K     Number of corrupted samples (default = M/8)
  -t T     Number of mismatches tolerated (default = K)
  -s SEED  Set random seed
  -p       Generate permutation file for BDD variable ordering
  -X XARGS  Set maximum Xor size (must be >= 3)

The generated file will have a name of the form lpn-nN-kK-tT-sS.cnf,
where N is the number of variables, k is the number of corrupted
samples, and t is the number of mismatches tolerated.

For a given value of N, the benchmark files were generated using k=N/4
and t=N/4 for the SAT formula and t=N/4-1 for the UNSAT formula, and
for different seeds S.

USING THE CHECKER

Suppose you've run file lpn-nN-kK-tT-sS.cnf through a SAT solver and stored its output as the file
lpn-nN-kK-tT-sS.data.  Then running:

python3 lpn-check.py lpn-nN-kK-tT-sS.cnf lpn-nN-kK-tT-sS.data

will have the program determine the generated parameters from comments
in the .cnf file and check the solution bits generated by the SAT
solver to see if it satisfy at least M-K samples.



